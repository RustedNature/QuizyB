@page "/quiz/{section}"
@using QuizyB.Services
@inject QuizService QuizService

<div class="container quiz-container">
    @if (QuizService.CurrentQuestion != null && !QuizService.IsFinished)
    {
        <div class="quiz-container-header">

            <h4 class="questions-left">
                Es sind noch @QuizService.QuestionsToSolve Fragen zu lösen
            </h4>
            <h4 class="points">Punktzahl: @_points</h4>
        </div>
        <div class="question-container">
            <h3 class="question"> @QuizService.CurrentQuestion.QuestionText </h3>
        </div>
        <div class="answer-container">
            @if (QuizService.CurrentQuestion.Answers != null)
            {
                for (var i = 0; i < QuizService.CurrentQuestion.Answers.Count; i++)
                {
                    var answerIndex = i;
                    <button class="answer-button @QuizService.GetButtonTheme(answerIndex)"
                            @onclick="() => QuizService.CheckAnswer(answerIndex, ref _points)" disabled="@QuizService.IsAnswered">
                        @QuizService.CurrentQuestion.Answers[answerIndex]
                    </button>
                }
            }
        </div>

        @switch (QuizService.IsAnswered)
        {
            case true when QuizService.IsCorrect:
                <h4 class="answer correct-answer">@QuizService.CurrentQuestion.Answers![QuizService.CurrentQuestion.CorrectAnswerIndex] ist die richtige Antwort</h4>
                <button class="next-button btn btn-primary" @onclick="QuizService.NextQuestion"> Nächste Frage</button>
                break;
            case true when !QuizService.IsCorrect:
                <h4 class="answer incorrect-answer">@QuizService.CurrentQuestion.Answers![QuizService.CurrentQuestion.CorrectAnswerIndex] wäre die richtige Antwort gewesen</h4>
                <button class="next-button btn btn-primary" @onclick="QuizService.NextQuestion"> Nächste Frage</button>
                break;
        }
    }
    else if (Is404)
    {
        <h1 class="not-found">Es gibt kein Quiz, zumindest noch nicht, für das Thema: "@Section" </h1>
    }
    else if (QuizService.Questions.Count == 0 && QuizService.QuizLoadedSuccessfully)
    {
        <h1 class="finished">Sie haben das Quiz mit dem Thema "@Section" mit @_points von möglichen @QuizService.MaxQuestionsCount Punkten abgeschlossen!</h1>
        <button class="reset-button btn btn-primary" @onclick="LoadQuizForSection">Reset</button>
    }
    else if (!QuizService.QuizLoadedSuccessfully && !QuizService.IsLoadingQuiz)
    {
        <h1 class="error">Hoppala do isch was schief gloffe, meldsch di bei deim Adminischdrator, ja?</h1>
    }
    else
    {
        <p>Loading...</p>
    }

</div>

@code {
    [Parameter] public string? Section { get; set; }
    private bool Is404 { get; set; }
    private int _points;


    protected override async Task OnParametersSetAsync()
    {
        await LoadQuizForSection();
        await base.OnInitializedAsync();
    }

    private async Task LoadQuizForSection()
    {
        if (Section == null) return;
        _points = 0;
        Is404 = false;
        QuizService.Reset();
        switch (Section.ToLower())
        {
            case "computerspiele":
                await QuizService.LoadQuestions("data/games.json");
                break;
            case "wunder_der_technik":
                await QuizService.LoadQuestions("data/technic.json");
                break;
            default:
                Is404 = true;
                break;
        }
    }

}